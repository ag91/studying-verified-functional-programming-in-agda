# Created 2018-12-02 Sun 00:42
#+TITLE: go through third chapter
#+AUTHOR: Andrea Giugliano
After an immersion in the Boolean type, let's define natural numbers
in Agda. We will use Peano's format for nats:

#+BEGIN_SRC agda2
data ℕ : Set where
  zero : ℕ
  suc : ℕ → ℕ

nat = ℕ
#+END_SRC

This means that we have zero as a terminal, and any other number is a
constructor: for example the decimal 1 is represented as ~suc zero~.

Agda can translate between decimal and our Peano notation
automatically if we use a pragma (I think we are speaking with the
compiler here):

#+BEGIN_SRC agda2
{-# BUILTIN NATURAL ℕ #-}
#+END_SRC

We are then creating an isomorphism between Agda's naturals and our
own datatype.

Let's define addition:

#+BEGIN_SRC agda2
_+_ : ℕ → ℕ → ℕ
zero + n = n
suc m + n = suc (m + n) 
#+END_SRC

This operation uses recursion when the first element to add is not
zero. Typically recursion means induction in proofs.

Let's first play around with zero and define two lemmas:

#+BEGIN_SRC agda2
0+ : ∀ (x : ℕ) → 0 + x ≡ x
+0 : ∀ (x : ℕ) → x + 0 ≡ x
#+END_SRC

Basically we would like to say that the base case of the Peano's
inductive naturals addition is commutative.

While the first lemma comes from the definition of addition (so we are
just a ~refl~ away), the second is tricky as we need to run the
recursion!

So:

#+BEGIN_SRC agda2
0+ : ∀ (x : ℕ) → 0 + x ≡ x
0+ x = refl

+0 : ∀ (x : ℕ) → x + 0 ≡ x
+0 zero = refl
+0 (suc n)  = { }0
#+END_SRC

Checking the goal of hole 0 returns the following

#+BEGIN_QUOTE
?0 : suc n + 0 ≡ suc n
#+END_QUOTE

The cool thing is that the goal is very similar to the lemma
definition of 0+. And Agda treats theorems as functions :) So let's
apply 0+!

#+BEGIN_SRC agda2
+0 (suc n) rewrite 0+ n = { }0
#+END_SRC

Now the goal is much better:

#+BEGIN_QUOTE
?0 : suc n ≡ suc n
#+END_QUOTE

We just rewrote the ~n + 0~ bit according to our lemma (~~n + 0 = n~).
The last bit can be solved through reflexivity.

#+BEGIN_SRC agda2
+0 : ∀ (x : ℕ) → x + 0 ≡ x
+0 zero = refl
+0 (suc n) rewrite +0 n = refl
#+END_SRC

This is the power of induction: for a recursive definition, given that
the predicate holds for the base case, we can assume that the
predicate holds for the step as well, BUT we have "just" to prove that
the predicate holds also for the successive step.

Another useful lemma is associativity, which has a very similar proof:

#+BEGIN_SRC agda2
+assoc : ∀ (x y z : ℕ) → x + (y + z) ≡ (x + y) + z
#+END_SRC

The author, Aaron Stump, provides a very useful code snippet for
making the most of Agda2 mode:

#+BEGIN_SRC elisp
(defun agda2-normalized-goal-and-context ()
  (interactive)
  (agda2-goal-and-context '(3)))

(defun agda2-normalized-goal-and-context-and-inferred ()
  (interactive)
  (agda2-goal-and-context-and-inferred '(3)))
#+END_SRC

The result of these functions can be obtained by prefixing the command
with prefix arguments (C-u for no normalization nor simplification and
C-u C-u for applying only normalization and not simplification).

So for the step case of the ~+assoc~ lemma's hole:

#+BEGIN_SRC agda2
+assoc (suc x) y z = { }1
#+END_SRC

We get:

- =C-c C-.= normalized and simplified

  #+BEGIN_QUOTE
  Goal: suc (x + (y + z)) ≡ suc (x + y + z)
  Have: ℕ
  ————————————————————————————————————————————————————————————
  z : ℕ
  y : ℕ
  x : ℕ
  #+END_QUOTE

- =C-u C-c C-.= not normalized nor simplified

  #+BEGIN_QUOTE
  Goal: suc x + (y + z) ≡ suc x + y + z
  Have: ℕ
  ————————————————————————————————————————————————————————————
  z : ℕ
  y : ℕ
  x : ℕ  
  #+END_QUOTE

- =C-u C-u C-c C-.= only normalized not simplified

  #+BEGIN_QUOTE
  Goal: suc (x + (y + z)) ≡ suc (x + y + z)
  Have: ℕ
  ————————————————————————————————————————————————————————————
  z : ℕ
  y : ℕ
  x : ℕ
  #+END_QUOTE

Let's now prove commutativity for addition:

#+BEGIN_SRC agda2
+comm : ∀ (x y : ℕ) → x + y ≡ y + x
#+END_SRC

For the base case we have:

#+BEGIN_QUOTE
+comm zero y = {!!}0

Goal: y ≡ y + 0
Have: ℕ
————————————————————————————————————————————————————————————
y : ℕ
#+END_QUOTE

This is familiar: we have the +0 lemma! So we can use this:

#+BEGIN_QUOTE
+comm zero y rewrite +0 y = refl
#+END_QUOTE

Next is interesting:

#+BEGIN_QUOTE
+comm (suc x) y = {!!}1

Goal: suc (x + y) ≡ y + suc x
Have: ℕ
————————————————————————————————————————————————————————————
y : ℕ
x : ℕ
#+END_QUOTE

The goal of the second hole tells us that we can apply induction:

#+BEGIN_QUOTE
+comm (suc x) y rewrite +comm x y = {!!}0

Goal: suc (y + x) ≡ y + suc x
Have: ℕ
————————————————————————————————————————————————————————————
y : ℕ
x : ℕ
#+END_QUOTE

At this point the goal is a bit of a mess: we have a very promising
goal but we do not know yet that adding a ~suc~ on the right is
equivalent to wrap the whole expression in a ~suc~. This is shown by
the following lemma, which can be proved with the induction pattern:

#+BEGIN_SRC agda2
+suc : ∀ (x y : ℕ) → x + (suc y) ≡ suc(x + y)
#+END_SRC

So our proof just needs a further rewrite:

#+BEGIN_QUOTE
+comm : ∀ (x y : ℕ) → x + y ≡ y + x
+comm zero y rewrite +0 y = refl
+comm (suc x) y rewrite +comm x y | +suc y x = refl
#+END_QUOTE

Note that subsequent rewrites can be appended with the ~|~ symbol.

Next we are introduced to multiplication in Peano's format.
The definition is:

#+BEGIN_QUOTE
_*_ : ℕ → ℕ → ℕ
zero  * n = zero
suc m * n = n + (m * n)
#+END_QUOTE

A property we can show is distributivity of multiplication:

#+BEGIN_QUOTE
*distribr : ∀ (x y z : ℕ) → (x + y) * z ≡ x * z + y * z
*distribr zero y z = refl
*distribr (suc x) y z rewrite *distribr x y z | +assoc z (x * z) (y * z) = refl
#+END_QUOTE

Note the last rewrite: we need to use induction and then apply the
~+assoc~ lemma to show the following goal:

#+BEGIN_QUOTE
?0 : z + (x * z + y * z) ≡ z + x * z + y * z
#+END_QUOTE

The cool thing again is that ~+assoc~ is just like a function: given
the right arguments it let us rewrite the expression to what we need.

We can define also the partial order predicate:

#+BEGIN_QUOTE
_<_ : ℕ → ℕ → 𝔹
0 < 0 = ff
0 < (suc y) = tt
(suc x) < (suc y) = x < y
(suc x) < 0 = ff
#+END_QUOTE

here the definition is a bit more involved: we have three base cases
for which we know the resulting Boolean, but we need recursion when
both numbers are ~suc~ constructors.

A good lemma to start is transitivity of order:

#+BEGIN_QUOTE
<-trans : ∀ {x y z : ℕ} → x < y ≡ tt → y < z ≡ tt → x < z ≡ tt
#+END_QUOTE

Note that the nats are now implicit arguments to our lemma: the
explicit arguments are the implication predicates.

For this proof =C-c C-c= is a bless:

#+BEGIN_QUOTE
<-trans : ∀ {x y z : ℕ} → x < y ≡ tt → y < z ≡ tt → x < z ≡ tt
<-trans {x} {0} p1 p2 rewrite <-0 x = 𝔹-contra p1
<-trans {0} {suc y} {0} p1 ()
<-trans {0} {suc y} {suc z} p1 p2 = refl
<-trans {suc x} {suc y} {0} p1 ()
<-trans {suc x} {suc y} {suc z} p1 p2 = <-trans {x} {y} {z} p1 p2
#+END_QUOTE

Note that the usage of the ~B-contra~ lemma is a limitation (or a
feature) of Agda, which requires us to use a lemma after a rewrite. In
our case this lemma should just show that =ff = tt= makes the
predicate impossible (i.e., ~B-contra~).

After order we can define equality:

#+BEGIN_QUOTE
_=ℕ_ : ℕ → ℕ → 𝔹
0 =ℕ 0 = tt
suc x =ℕ suc y = x =ℕ y
_ =ℕ _ = ff
#+END_QUOTE

And we can prove that our equality is isomorphic to the one for
decimals:

#+BEGIN_QUOTE
=ℕ-from-≡ : ∀ {x y : ℕ} → x ≡ y → x =ℕ y ≡ tt
=ℕ-to-≡ : ∀ {x y : ℕ} → x =ℕ y ≡ tt → x ≡ y
#+END_QUOTE

Finally there is a very interesting pattern to consider: proofs follow strictly
the shape of definitions. This is made extremely explicit by mutual
recursive definitions. Let's take even and odd predicates as example:

#+BEGIN_QUOTE
is-even : ℕ → 𝔹
is-odd : ℕ → 𝔹
is-even 0 = tt
is-even (suc x) = is-odd x
is-odd 0 = ff
is-odd (suc x) = is-even x
#+END_QUOTE

Basically we define the base cases for both our predicates and then
the recursive step uses the other predicate.

Now, if we want to prove something about these predicates, we will see
their structure influence the induction pattern in the proof!

#+BEGIN_QUOTE
even~odd : ∀ (x : ℕ) → is-even x ≡ ~ is-odd x
odd~even : ∀ (x : ℕ) → is-odd x ≡ ~ is-even x
even~odd zero = refl
even~odd (suc x) = odd~even x
odd~even zero = refl
odd~even (suc x) = even~odd x
#+END_QUOTE

Exercises:

- 3.1
  #+BEGIN_QUOTE
   <-trans : ∀ {x y z : ℕ} → x < y ≡ tt → y < z ≡ tt → x < z ≡ tt
  <-trans {zero} {zero} {z} p1 p2 = p2
  <-trans {zero} {suc y} {zero} p1 p2 = p2
  <-trans {zero} {suc y} {suc z} p1 p2 = refl
  <-trans {suc x} {zero} {zero} p1 p2 = p2
  <-trans {suc x} {zero} {suc z} p1 p2 = 𝔹-contra p1
  <-trans {suc x} {suc y} {zero} p1 p2 = p2
  <-trans {suc x} {suc y} {suc z} p1 p2 rewrite <-trans {x} {y} {z} p1 p2 = refl
  #+END_QUOTE
- 3.2 

  #+BEGIN_QUOTE
  >-trans : ∀ {x y z : ℕ} → x > y ≡ tt → y > z ≡ tt → x > z ≡ tt
  >-trans {zero} {zero} {z} p1 p2 = p2
  >-trans {zero} {suc y} ()
  >-trans {suc x} {y} {zero} p1 p2 = refl
  >-trans {suc x} {zero} {suc z} p1 p2 = 𝔹-contra p2
  >-trans {suc x} {suc y} {suc z} p1 p2 rewrite >-trans {x} {y} {z} p1 p2 = refl
  -----
  >-suc : ∀ {x : ℕ} -> suc x > x ≡ tt
  >-suc {zero} = refl
  >-suc {suc x} = >-suc {x}

  >+ : ∀ {x y : ℕ} → y =ℕ 0 ≡ ff → y + x > x ≡ tt
  >+ {x} {zero} ()
  >+ {x} {suc zero} p = >-suc {x}
  >+ {x} {suc (suc y)} p = <-trans{x}{(suc y) + x}{suc ((suc y) + x)} (>+ {x} {suc y} p) (<-suc ((suc y) + x))
  #+END_QUOTE
- 3.3
  - a -> iv
  - b -> i
